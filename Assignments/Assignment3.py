'''
Created on Apr 20, 2018
@author: Samantha Hangsan
Assignment: 3
SPECS: 
Preliminary data mining of the prices of Apple stock. 
- Calculate the monthly average prices of Apple stock from 1984 to 2013.  
    - File of Apple's daily stock's prices will be given to you named table.csv. 
    - Open the file by notepad or similar text editor, and it is comma delimited. If you open it with Excel, it shows you the data in a spreadsheet.
'''
import csv
from collections import defaultdict

def getInputDescriptor(): 
    # Repeatedly prompt for the name of an input file until the user enters filename and the file can be opened for input
    while True:
        try: 
            user_input = input('Enter the name of your desired input file: ')
            # Return a file descriptor attached to the opened file
            infile = open(user_input)
        except FileNotFoundError:
            print('Error! File not found!')
        else: 
            break

    return infile

def getDataList(file_object, column_number):
    # Read the file of Apple's data.
    file_object.seek(0,0)  # set pointer to beginning
    reader = csv.reader(file_object)
    next(reader, None) # skip headers
    tuples_list = []
    for row in reader: 
       tuples_list.append([row[0],float(row[column_number])])
    return tuples_list

def averageData(list_of_tuples): 
    # Take in an argument that is the list of tuples generated by getDataList above
    data = defaultdict(list)
    for row in (list_of_tuples):
        date = year, month = row[0].split('-')[:2]      # Eliminate day in date
        date = ':'.join([month, year])
        data[date].append(float(row[1]))

    # Average the data for each month
    average = {date: sum(values)/len(values) for date, values in data.items()}
    
    # Regenerate a list of tuples. A tuple here will have the form: (data_avg, date). For example: (2972945.4545454546, '07:1985') 
    average_list = average.items()
    average_tuples_list = []
    for row in (average_list):
        average_tuples_list.append([float(row[1]), row[0]])
    return average_tuples_list

def outputAverage(filename, average):  # Output the date and average data in the tuple to a file 
    # File name follows the naming convention ‘data_x.txt where ‘x’ is the column number
    with open('data_%s.txt' % filename, 'w') as outfile: 
        outfile.write('\n'.join('{:14}{:12.2f}'.format(row[1],(row[0])) for row in average)) 
    
    # Close output files
    outfile.close()

def main():
    # Call getInputDescriptor to get a file descriptor
    fid = getInputDescriptor()
    
    # Iterate through columns 1-6 to average
    for column in range (1, 7):
        data_extracted = getDataList(fid, column)
        average_data = averageData(data_extracted)
        outputAverage(column, average_data)
    
    # Close input file
    fid.close()
    
if __name__ == '__main__':
    main()