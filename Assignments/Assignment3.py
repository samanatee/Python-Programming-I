'''
Created on Apr 20, 2018
@author: Samantha Hangsan
Assignment: 3

SPECS: 
Preliminary data mining of the prices of Apple stock. 
- Calculate the monthly average prices of Apple stock from 1984 to 2013.  
    - file of Apple's daily stock's prices will be given to you named table.csv. 
    - open the file by notepad or similar text editor, and it is comma delimited. If you open it with Excel, it shows you the data in a spreadsheet.
'''
import csv, collections

def getInputDescriptor(): 
    # Repeatedly prompt for the name of an input file until the user enters filename and the file can be opened for input. 
    user_input = input('Enter the name of your desired input file: ')
    while(user_input != 'table.csv'):
        user_input = input('Error! Please enter the name of a valid input file: ')

    # Return a file descriptor attached to the opened file.
    infile = open(user_input)
    return infile

def getDataList(file_object, column_number):
    # Read the file of Apple's data. 
    data = {}
    reader = csv.DictReader(file_object)
    for row in reader: 
        for header, value in row.items():
            try: 
                data[header].append(value)
            except KeyError:
                data[header] = [value]
    date = data['Date']
    print(date)

    if (column_number == 1):
         open = data['Open']
    elif (column_number == 2):
         high = data['High']
    elif (column_number == 3):
        low = data['Low']
    elif (column_number == 4):
        close = data['Close']
    elif (column_number == 5):
        vol = data['Volume']
    elif (column_number == 6):
        adj = data['Adj Close']
   
    # The function is flexible as it can read the data for any column of the data (1 through 6). 
    # If you read column 6, you are gathering the data for the "Adjusted Daily Close". 
    # If you read column 5, you are gathering data for the "Volume" that day. 
    # Return a list that consists of tuples. Each tuple is of the form: (date, column_data). 
        # For example: ('2013-02-08', 474.98) if we were collecting  data from column 6.
        #return tuples_list

def averageData(list_of_tuples): 
    pass
    # In this function, take in an argument that is the list of tuples generated by getDataList above. You will average the data for each month, and regenerate a list of tuples. A tuple here will have the form: (data_avg, date). For example: (2972945.4545454546, '07:1985') . Note the date does not contain a day any more.

def outputAverage(filename, average): 
    pass
    # Take in an argument that is the list of tuples generated by averageData above. 
    # Output the date and average data in the tuple to a file. 
    # The file name follows the naming convention ‘data_x.txt where ‘x’ is the column number. 
    # For example, the average data for column 1 will be data_1.txt. For your refernce, these files are attached to the assignment. 
    # Compare the output of your program with the attached files.

def main():
# call getInputDescriptor to get a file descriptor
    fid = getInputDescriptor()
# iterate through columns 1-6 to average
    for column in range (1, 7):
        # call the getDataList function
        getDataList(fid, column)
        # call the averageData function
        # call the OutputAverage
# close input file
    fid.close()
    
if __name__ == '__main__':
    main()